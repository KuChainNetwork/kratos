// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/asset/types/types.proto

package types

import (
	fmt "fmt"
	types "github.com/KuChain-io/kuchain/chain/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CoinDescription description info for a coin type
type CoinDescription struct {
	// Symbol coin symbol name
	Symbol types.Name `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	// Creator coin creator account name
	Creator types.Name `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	// Description coin description info
	Description []byte `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
}

func (m *CoinDescription) Reset()      { *m = CoinDescription{} }
func (*CoinDescription) ProtoMessage() {}
func (*CoinDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{0}
}
func (m *CoinDescription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinDescription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinDescription.Merge(m, src)
}
func (m *CoinDescription) XXX_Size() int {
	return m.Size()
}
func (m *CoinDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinDescription.DiscardUnknown(m)
}

var xxx_messageInfo_CoinDescription proto.InternalMessageInfo

// CoinStat state for a coin type
type CoinStat struct {
	// Symbol coin symbol name
	Symbol types.Name `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	// Creator coin creator account name
	Creator      types.Name `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	CreateHeight int64      `protobuf:"varint,3,opt,name=create_height,json=createHeight,proto3" json:"create_height,omitempty" yaml:"create_height"`
	// Supply coin current supply
	Supply types1.Coin `protobuf:"bytes,4,opt,name=supply,proto3" json:"supply" yaml:"supply"`
	// MaxSupply coin max supply limit
	MaxSupply     types1.Coin `protobuf:"bytes,5,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply" yaml:"max_supply"`
	CanIssue      bool        `protobuf:"varint,6,opt,name=can_issue,json=canIssue,proto3" json:"can_issue,omitempty" yaml:"can_issue"`
	CanLock       bool        `protobuf:"varint,7,opt,name=can_lock,json=canLock,proto3" json:"can_lock,omitempty" yaml:"can_lock"`
	IssueToHeight int64       `protobuf:"varint,8,opt,name=issue_to_height,json=issueToHeight,proto3" json:"issue_to_height,omitempty" yaml:"issue_to_height"`
	// InitSupply coin init supply, if issue_to_height is not zero, this will be the start supply for issue
	InitSupply types1.Coin `protobuf:"bytes,9,opt,name=init_supply,json=initSupply,proto3" json:"init_supply" yaml:"init_supply"`
}

func (m *CoinStat) Reset()      { *m = CoinStat{} }
func (*CoinStat) ProtoMessage() {}
func (*CoinStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{1}
}
func (m *CoinStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinStat.Merge(m, src)
}
func (m *CoinStat) XXX_Size() int {
	return m.Size()
}
func (m *CoinStat) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinStat.DiscardUnknown(m)
}

var xxx_messageInfo_CoinStat proto.InternalMessageInfo

type MsgCreateCoinData struct {
	// Symbol coin symbol name
	Symbol types.Name `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	// Creator coin creator account name
	Creator types.Name `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	// MaxSupply coin max supply limit
	MaxSupply types1.Coin `protobuf:"bytes,3,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply" yaml:"max_supply"`
	// CanIssue if the coin can issue after create
	CanIssue bool `protobuf:"varint,4,opt,name=can_issue,json=canIssue,proto3" json:"can_issue,omitempty" yaml:"can_issue"`
	// CanLock if the coin can lock by user
	CanLock bool `protobuf:"varint,5,opt,name=can_lock,json=canLock,proto3" json:"can_lock,omitempty" yaml:"can_lock"`
	// IssueToHeight if this is not zero, creator only can issue this
	IssueToHeight int64 `protobuf:"varint,6,opt,name=issue_to_height,json=issueToHeight,proto3" json:"issue_to_height,omitempty" yaml:"issue_to_height"`
	// InitSupply coin init supply, if issue_to_height is not zero, this will be the start supply for issue
	InitSupply types1.Coin `protobuf:"bytes,7,opt,name=init_supply,json=initSupply,proto3" json:"init_supply" yaml:"init_supply"`
	Desc       []byte      `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty" yaml:"desc"`
}

func (m *MsgCreateCoinData) Reset()         { *m = MsgCreateCoinData{} }
func (m *MsgCreateCoinData) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCoinData) ProtoMessage()    {}
func (*MsgCreateCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{2}
}
func (m *MsgCreateCoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCoinData.Merge(m, src)
}
func (m *MsgCreateCoinData) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCoinData proto.InternalMessageInfo

type MsgIssueCoinData struct {
	// Symbol coin symbol name
	Symbol types.Name `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol" yaml:"symbol"`
	// Creator coin creator account name
	Creator types.Name `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator" yaml:"creator"`
	// MaxSupply coin max supply limit
	Amount types1.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgIssueCoinData) Reset()         { *m = MsgIssueCoinData{} }
func (m *MsgIssueCoinData) String() string { return proto.CompactTextString(m) }
func (*MsgIssueCoinData) ProtoMessage()    {}
func (*MsgIssueCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{3}
}
func (m *MsgIssueCoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueCoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueCoinData.Merge(m, src)
}
func (m *MsgIssueCoinData) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueCoinData proto.InternalMessageInfo

type MsgBurnCoinData struct {
	// Symbol coin symbol name
	Id types.AccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// MaxSupply coin max supply limit
	Amount types1.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgBurnCoinData) Reset()         { *m = MsgBurnCoinData{} }
func (m *MsgBurnCoinData) String() string { return proto.CompactTextString(m) }
func (*MsgBurnCoinData) ProtoMessage()    {}
func (*MsgBurnCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{4}
}
func (m *MsgBurnCoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnCoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnCoinData.Merge(m, src)
}
func (m *MsgBurnCoinData) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnCoinData proto.InternalMessageInfo

type MsgLockCoinData struct {
	// Id lock account
	Id types.AccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// Amount coins to lock
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	// UnlockBlockHeight the block height the coins unlock
	UnlockBlockHeight int64 `protobuf:"varint,3,opt,name=unlockBlockHeight,proto3" json:"unlockBlockHeight,omitempty" yaml:"unlockBlockHeight"`
}

func (m *MsgLockCoinData) Reset()         { *m = MsgLockCoinData{} }
func (m *MsgLockCoinData) String() string { return proto.CompactTextString(m) }
func (*MsgLockCoinData) ProtoMessage()    {}
func (*MsgLockCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{5}
}
func (m *MsgLockCoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockCoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockCoinData.Merge(m, src)
}
func (m *MsgLockCoinData) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockCoinData proto.InternalMessageInfo

type MsgUnlockCoinData struct {
	// Id lock account
	Id types.AccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// Amount coins to lock
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *MsgUnlockCoinData) Reset()         { *m = MsgUnlockCoinData{} }
func (m *MsgUnlockCoinData) String() string { return proto.CompactTextString(m) }
func (*MsgUnlockCoinData) ProtoMessage()    {}
func (*MsgUnlockCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ac1edd084f0ad5, []int{6}
}
func (m *MsgUnlockCoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlockCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlockCoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlockCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlockCoinData.Merge(m, src)
}
func (m *MsgUnlockCoinData) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlockCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlockCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlockCoinData proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CoinDescription)(nil), "kuchain.x.asset.types.v1.CoinDescription")
	proto.RegisterType((*CoinStat)(nil), "kuchain.x.asset.types.v1.CoinStat")
	proto.RegisterType((*MsgCreateCoinData)(nil), "kuchain.x.asset.types.v1.MsgCreateCoinData")
	proto.RegisterType((*MsgIssueCoinData)(nil), "kuchain.x.asset.types.v1.MsgIssueCoinData")
	proto.RegisterType((*MsgBurnCoinData)(nil), "kuchain.x.asset.types.v1.MsgBurnCoinData")
	proto.RegisterType((*MsgLockCoinData)(nil), "kuchain.x.asset.types.v1.MsgLockCoinData")
	proto.RegisterType((*MsgUnlockCoinData)(nil), "kuchain.x.asset.types.v1.MsgUnlockCoinData")
}

func init() { proto.RegisterFile("x/asset/types/types.proto", fileDescriptor_78ac1edd084f0ad5) }

var fileDescriptor_78ac1edd084f0ad5 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4f, 0x4f, 0xdb, 0x48,
	0x1c, 0x8d, 0x93, 0x10, 0x92, 0x09, 0x6c, 0x88, 0x61, 0x59, 0x13, 0xa1, 0x98, 0x1d, 0xa4, 0x55,
	0x2e, 0x38, 0x62, 0x57, 0x2b, 0xad, 0x90, 0x38, 0x60, 0x38, 0xc0, 0xb2, 0x41, 0x2b, 0xd3, 0x5e,
	0x7a, 0x89, 0x8c, 0x6d, 0x25, 0x56, 0x62, 0x4f, 0xe4, 0x19, 0xa3, 0xe4, 0x1b, 0xf4, 0xd8, 0x63,
	0x7b, 0xa3, 0xea, 0xad, 0x9f, 0x84, 0x5b, 0x39, 0xf6, 0xe4, 0x56, 0xf0, 0x0d, 0x7c, 0xab, 0xd4,
	0x43, 0x35, 0x7f, 0xdc, 0x18, 0xd2, 0xf4, 0x1f, 0x1c, 0xe0, 0x32, 0xcc, 0xf0, 0x9b, 0xf7, 0xfc,
	0xde, 0xcf, 0xcf, 0x93, 0x01, 0x2b, 0xc3, 0xa6, 0x89, 0xb1, 0x43, 0x9a, 0x64, 0x34, 0x70, 0x30,
	0x1f, 0xb5, 0x41, 0x80, 0x08, 0x92, 0x95, 0x5e, 0x68, 0x75, 0x4d, 0xd7, 0xd7, 0x86, 0x1a, 0xdb,
	0xa2, 0xf1, 0xe2, 0xe9, 0x66, 0xed, 0x0f, 0xd2, 0x75, 0x03, 0xbb, 0x3d, 0x30, 0x03, 0x32, 0x6a,
	0xb2, 0xcd, 0xcd, 0x0e, 0xea, 0xa0, 0xf1, 0x8c, 0x33, 0xd4, 0x7e, 0x63, 0xf8, 0x49, 0xea, 0xda,
	0xdf, 0xa7, 0x8e, 0x6f, 0xa3, 0xa0, 0xd9, 0x71, 0x49, 0x37, 0x3c, 0xd1, 0x2c, 0xe4, 0x35, 0x2d,
	0x84, 0x3d, 0x84, 0xc5, 0x9f, 0x0d, 0x6c, 0xf7, 0x26, 0x61, 0x30, 0x96, 0x40, 0x65, 0x17, 0xb9,
	0xfe, 0x9e, 0x83, 0xad, 0xc0, 0x1d, 0x10, 0x17, 0xf9, 0xf2, 0x21, 0x28, 0xe0, 0x91, 0x77, 0x82,
	0xfa, 0x8a, 0xb4, 0x26, 0x35, 0xca, 0x7f, 0xae, 0x6a, 0x89, 0x6c, 0x3e, 0x26, 0xa2, 0xb5, 0x23,
	0xd3, 0x73, 0xf4, 0x5f, 0xcf, 0x23, 0x35, 0x13, 0x47, 0xea, 0xfc, 0xc8, 0xf4, 0xfa, 0x5b, 0x90,
	0x23, 0xa1, 0x21, 0x28, 0xe4, 0x23, 0x30, 0x6b, 0x05, 0x8e, 0x49, 0x50, 0xa0, 0x64, 0xbf, 0x83,
	0x6d, 0x59, 0xb0, 0xfd, 0xc2, 0xd9, 0x04, 0x14, 0x1a, 0x09, 0x89, 0xfc, 0x0f, 0x28, 0xdb, 0x63,
	0xad, 0x4a, 0x6e, 0x4d, 0x6a, 0xcc, 0xe9, 0xcb, 0x71, 0xa4, 0xca, 0x1c, 0x91, 0x2a, 0x42, 0x23,
	0xbd, 0x75, 0xab, 0xf8, 0xf4, 0x4c, 0xcd, 0x3c, 0x3f, 0x53, 0x33, 0xf0, 0x63, 0x1e, 0x14, 0xa9,
	0xe9, 0x63, 0x62, 0x92, 0xfb, 0xed, 0x76, 0x1b, 0xcc, 0xb3, 0xa9, 0xd3, 0xee, 0x3a, 0x6e, 0xa7,
	0x4b, 0x98, 0xdf, 0x9c, 0xae, 0xc4, 0x91, 0xba, 0x94, 0xc2, 0x24, 0x65, 0x68, 0xcc, 0xf1, 0xf5,
	0x3e, 0x5b, 0xca, 0x3a, 0x28, 0xe0, 0x70, 0x30, 0xe8, 0x8f, 0x94, 0x3c, 0x53, 0xb3, 0xa8, 0xf1,
	0x30, 0xb4, 0xb1, 0xdd, 0xa3, 0x22, 0x68, 0x13, 0x26, 0x2c, 0x31, 0x00, 0xb5, 0xc4, 0x26, 0x72,
	0x0b, 0x00, 0xcf, 0x1c, 0xb6, 0x05, 0xcf, 0xcc, 0x74, 0x9e, 0x15, 0xc1, 0x53, 0xe5, 0x3c, 0x63,
	0x10, 0x34, 0x4a, 0x9e, 0x39, 0x3c, 0xe6, 0x74, 0x9b, 0xa0, 0x64, 0x99, 0x7e, 0xdb, 0xc5, 0x38,
	0x74, 0x94, 0xc2, 0x9a, 0xd4, 0x28, 0xea, 0x4b, 0x71, 0xa4, 0x2e, 0x08, 0x37, 0x49, 0x09, 0x1a,
	0x45, 0xcb, 0xf4, 0x0f, 0xe8, 0x54, 0xd6, 0x00, 0x9d, 0xb7, 0xfb, 0xc8, 0xea, 0x29, 0xb3, 0x0c,
	0xb1, 0x18, 0x47, 0x6a, 0x65, 0x8c, 0xa0, 0x15, 0xda, 0x34, 0xd3, 0xff, 0x0f, 0x59, 0x3d, 0x59,
	0x07, 0x15, 0xc6, 0xd1, 0x26, 0x28, 0x69, 0x5b, 0x91, 0xb5, 0xad, 0x16, 0x47, 0xea, 0x32, 0x87,
	0xdd, 0xd8, 0x00, 0x8d, 0x79, 0xf6, 0x9f, 0x47, 0x48, 0x74, 0xee, 0x7f, 0x50, 0x76, 0x7d, 0x97,
	0x24, 0xb6, 0x4b, 0xd3, 0x6d, 0xd7, 0x84, 0x6d, 0x91, 0xbf, 0x14, 0x0a, 0x1a, 0x80, 0xae, 0xb8,
	0xf1, 0x54, 0xfc, 0x5e, 0xe5, 0x41, 0xb5, 0x85, 0x3b, 0xbb, 0xec, 0x4d, 0xb1, 0x8f, 0xcf, 0x24,
	0xe6, 0xfd, 0xce, 0xe1, 0xf5, 0x10, 0xe4, 0xee, 0x34, 0x04, 0xf9, 0x1f, 0x0e, 0xc1, 0xcc, 0xcf,
	0x85, 0xa0, 0x70, 0xcb, 0x10, 0xcc, 0xde, 0x3a, 0x04, 0xf2, 0x3a, 0xc8, 0xd3, 0x23, 0x89, 0xe5,
	0x71, 0x4e, 0xaf, 0xc4, 0x91, 0x5a, 0x1e, 0x1f, 0x5b, 0xd0, 0x60, 0xc5, 0xad, 0x3c, 0x4d, 0x0a,
	0xfc, 0x20, 0x81, 0x85, 0x16, 0xee, 0x30, 0xf7, 0x0f, 0x23, 0x24, 0x3a, 0x28, 0x98, 0x1e, 0x0a,
	0x7d, 0xf2, 0xb5, 0x80, 0xdc, 0xd0, 0xc4, 0x01, 0xd0, 0x10, 0x48, 0xe1, 0xfd, 0xa5, 0x04, 0x2a,
	0x2d, 0xdc, 0xd1, 0xc3, 0xc0, 0xff, 0x6c, 0x7d, 0x0f, 0x64, 0x5d, 0x5b, 0xd8, 0xfe, 0x7d, 0x9a,
	0xd0, 0x1d, 0xcb, 0xa2, 0x34, 0x07, 0x7b, 0x7a, 0x55, 0x3c, 0xa7, 0x24, 0xde, 0x88, 0x0d, 0x8d,
	0xac, 0x6b, 0xa7, 0x34, 0x66, 0x6f, 0xa9, 0xf1, 0x45, 0x96, 0x69, 0xa4, 0x61, 0xbb, 0x63, 0x8d,
	0x7e, 0x4a, 0x63, 0x6e, 0x9a, 0xc6, 0x9d, 0x2f, 0x6a, 0x7c, 0xfd, 0x4e, 0x6d, 0x7c, 0xfb, 0x06,
	0xc0, 0x18, 0x70, 0xe2, 0x47, 0xfe, 0x17, 0x54, 0x43, 0x9f, 0x7e, 0x3e, 0x3a, 0x1d, 0xf6, 0xd3,
	0x3f, 0x34, 0xab, 0x71, 0xa4, 0x2a, 0xfc, 0x09, 0x13, 0x5b, 0xa0, 0x31, 0x09, 0x13, 0xbd, 0x79,
	0x23, 0xb1, 0x13, 0xee, 0x31, 0x2b, 0x3f, 0xec, 0xee, 0x70, 0x47, 0xfa, 0xf6, 0xf9, 0x65, 0x5d,
	0xba, 0xb8, 0xac, 0x4b, 0xef, 0x2f, 0xeb, 0xd2, 0xb3, 0xab, 0x7a, 0xe6, 0xe2, 0xaa, 0x9e, 0x79,
	0x7b, 0x55, 0xcf, 0x3c, 0x59, 0x4f, 0x31, 0x1e, 0x86, 0xbb, 0xd4, 0xcd, 0x86, 0x8b, 0x9a, 0xd7,
	0x2e, 0x81, 0x27, 0x05, 0x76, 0xdb, 0xfa, 0xeb, 0x53, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf5,
	0xd0, 0x88, 0x1c, 0x0a, 0x00, 0x00,
}

func (m *CoinDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinDescription) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinDescription) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Symbol.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CoinStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InitSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.IssueToHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssueToHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.CanLock {
		i--
		if m.CanLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.CanIssue {
		i--
		if m.CanIssue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.MaxSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CreateHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreateHeight))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Symbol.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCreateCoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x42
	}
	{
		size, err := m.InitSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.IssueToHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssueToHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.CanLock {
		i--
		if m.CanLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CanIssue {
		i--
		if m.CanIssue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.MaxSupply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Symbol.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgIssueCoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueCoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueCoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Symbol.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgBurnCoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnCoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnCoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgLockCoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockCoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockCoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnlockBlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnlockBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUnlockCoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlockCoinData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlockCoinData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinDescription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Symbol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Creator.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CoinStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Symbol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Creator.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.CreateHeight != 0 {
		n += 1 + sovTypes(uint64(m.CreateHeight))
	}
	l = m.Supply.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MaxSupply.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.CanIssue {
		n += 2
	}
	if m.CanLock {
		n += 2
	}
	if m.IssueToHeight != 0 {
		n += 1 + sovTypes(uint64(m.IssueToHeight))
	}
	l = m.InitSupply.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *MsgCreateCoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Symbol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Creator.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MaxSupply.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.CanIssue {
		n += 2
	}
	if m.CanLock {
		n += 2
	}
	if m.IssueToHeight != 0 {
		n += 1 + sovTypes(uint64(m.IssueToHeight))
	}
	l = m.InitSupply.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MsgIssueCoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Symbol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Creator.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *MsgBurnCoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *MsgLockCoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.UnlockBlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.UnlockBlockHeight))
	}
	return n
}

func (m *MsgUnlockCoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinDescription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Symbol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = append(m.Description[:0], dAtA[iNdEx:postIndex]...)
			if m.Description == nil {
				m.Description = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Symbol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateHeight", wireType)
			}
			m.CreateHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanIssue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanIssue = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLock = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueToHeight", wireType)
			}
			m.IssueToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueToHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Symbol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanIssue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanIssue = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanLock = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueToHeight", wireType)
			}
			m.IssueToHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssueToHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = append(m.Desc[:0], dAtA[iNdEx:postIndex]...)
			if m.Desc == nil {
				m.Desc = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueCoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueCoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueCoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Symbol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnCoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnCoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnCoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLockCoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockCoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockCoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockBlockHeight", wireType)
			}
			m.UnlockBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlockCoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlockCoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlockCoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
